import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/filter';
import 'rxjs/add/observable/merge';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/skip';
import { DraggableEvent } from './DraggableEvent';
export declare class Draggable {
    static SCROLL_SPEED: number;
    element: Element;
    dragStart: Observable<DraggableEvent>;
    dragMove: Observable<DraggableEvent>;
    dragStop: Observable<DraggableEvent>;
    private requestAnimationFrame;
    private cancelAnimationFrame;
    private mousemove;
    private mouseup;
    private mousedown;
    private config;
    private autoScrollingInterval;
    constructor(element: Element, config?: {});
    private createDragStartObservable();
    private createDragMoveObservable(dragStart);
    private createDragStopObservable(dragStart);
    private startScroll(item, event);
    private startScrollForContainer(event, scrollContainer);
    private startScrollVerticallyForContainer(event, scrollContainer);
    private startScrollHorizontallyForContainer(event, scrollContainer);
    private startScrollForWindow(event);
    private startScrollVerticallyForWindow(event);
    private startScrollHorizontallyForWindow(event);
    private getScrollContainer(node);
    private startAutoScrolling(node, amount, direction);
    private getOffset(el);
    private getScroll(scrollProp, offsetProp);
    private isDragingByHandler(event);
    private isValidDragHandler(targetEl);
    private inRange(startEvent, moveEvent, range);
    private hasElementWithClass(className, target);
    private pauseEvent(e);
    private fixProblemWithDnDForIE(element);
    private isTouchDevice();
    private isIEorEdge();
}
